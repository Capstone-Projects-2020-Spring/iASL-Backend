# iASL Transfer Learning
# Read in a dataset to be trained and weights generated by training another dataset
# Reduce the "weight" given to the previous weights and train the new dataset, updating the previous weights

import argparse
import numpy as np
import sys

parser = argparse.argumentParser()
parser.addArgument("-n", "--newdata", help="Specify the name of the new dataset")
parser.addArgument("-w", "--weights", help="Specify the file containing the weights and biases")
# Example: python3 transfer_learning.py -n new_dataset.bin -w weights.txt

# Check whether the user entered a dataset for training; exit if no dataset entered
if (args.newdata == None)
  print("Error: No new dataset specified")
  sys.exit()
  
# Check whether the user entered weights; exit if no weights entered
if (args.weights == None)
  print("Error: No weights specified")
  sys.exit()

# Read in weights and biases
weights[][] = args.weights
w = np.matrix(weights)

# Multiply weights and biases by W = 0.7
for i in range(np.size(w, 0)):
  for j in range(np.size(w, 1)):
    w[i][j] *= 0.7

# Read in new data to train
newdata[] = args.newdata

'''Perform training on the new data, updating the above weights and biases'''
# Note: Using some code from scripts/train.py (by @TarekE-dev)
epochs = 5
batch_size = 16

files = newdata.get_flist(flist)
labels = newdata.get_lines(anno)

# Randomly split the dataset
temp_zipped = list(zip(files, labels))
random.shuffle(temp_zipped)
files, labels = zip(*temp_zipped)
split = float(train_values["tr_cv_split"])

# Save the updated weights and biases
